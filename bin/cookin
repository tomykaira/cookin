#!/usr/bin/env ruby

require 'cool.io'
require 'cool.io-http'
require 'yajl'
require 'base64'
require "uri"

API_URI = URI.parse('https://stream.twitter.com/1/statuses/sample.json')

class TwitterClient < Cool.io::HttpClient
  def self.connect
    conn = super API_URI.host, API_URI.port
    conn.extend(Coolio::SSL)
    conn
  end

  def request
    auth = Base64.encode64(ENV['TWITTER_USER'] + ':' + ENV['TWITTER_PASS'])
    super 'GET', API_URI.path, :head=>{ 'Authorization'=>"Basic #{auth}", 'Accept'=>'*/*', 'Connection'=>'keep-alive'}
  end

  def on_response_header(header)
    super
    @yajl = Yajl::Parser.new(:symbolize_keys=>true)
    @yajl.on_parse_complete = method(:on_element)
  end

  def on_body_data(data)
    begin
      @yajl << data
    rescue Yajl::ParseError => e
      puts "ParseError: #{ e.message }"
      puts data
    end
  end

  def on_request_complete
    super
    $stderr.puts "all done"
  end

  def on_element(element)
    return on_delete(element[:delete]) if element[:delete]
    return on_tweet(element)
  rescue NoMethodError => e
    $stderr.puts "UNEXPECTED #{element.inspect}"
  end

  def on_delete(deletion)
    $stderr.puts "Redacting tweet #{deletion[:status][:id]} from #{deletion[:status][:user_id]}"
  end

  def on_tweet(tweet)
    $stdout.puts "#{tweet[:user][:name]} (#{tweet[:user][:screen_name]}): #{tweet[:text]}"
  end

  def on_connect
    ssl_client_start if respond_to?(:ssl_socket)
    super
  end
end

loop = Cool.io::Loop.default
client = TwitterClient.connect.attach(loop)
client.request
loop.run
